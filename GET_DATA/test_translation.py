import asyncio
import aiohttp
import json
import os
import sys
from get_token import load_token  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º access_token
access_token = load_token()

# üîπ API Endpoints
DERIVATIVE_MANIFEST_ENDPOINT = "https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/manifest"

# üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
BATCH_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–π –ø–∞—á–∫–µ
semaphore = asyncio.Semaphore(10)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

# üîπ –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Å —Ö–∞–±–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
BASE_FOLDER = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))


async def fetch(session, url, headers, description):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429."""
    async with semaphore:
        for attempt in range(1, 6):
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 429:
                    await asyncio.sleep(attempt * 2)
                else:
                    return None
        return None

async def check_translation_status(session, access_token, urns):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–µ—Ä—Å–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    tasks = [
        fetch(session, DERIVATIVE_MANIFEST_ENDPOINT.format(urn=urn),
              {"Authorization": f"Bearer {access_token}"}, f"–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ URN {urn}")
        for urn in urns
    ]
    results = await asyncio.gather(*tasks)
    return {urn: (res.get("status") if res else "not available") for urn, res in zip(urns, results)}

async def process_project(session, access_token, hub_name, project_name, project_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç: –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π."""
    print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: {project_name} (–∏–∑ —Ö–∞–±–∞ {hub_name})")

    json_path = os.path.join(project_path, "rvt_files.json")
    if not os.path.exists(json_path):
        print(f"‚ö†Ô∏è –í –ø—Ä–æ–µ–∫—Ç–µ {project_name} –Ω–µ—Ç —Ñ–∞–π–ª–∞ rvt_files.json. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        return None

    with open(json_path, "r", encoding="utf-8") as f:
        project_data = json.load(f)

    project_id = project_data.get("project_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    print(f"üîπ ID –ø—Ä–æ–µ–∫—Ç–∞: {project_id}")

    project_results = {}
    
    for rvt_file in project_data.get("rvt_files", []):
        file_name = rvt_file["name"]
        print(f"üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {file_name}")

        versions = rvt_file.get("versions", [])
        urns = [v["urn"] for v in versions if "urn" in v and v["urn"] != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]

        if not urns:
            print(f"‚ö†Ô∏è –ù–µ—Ç URN –¥–ª—è {file_name}. –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            project_results[file_name] = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω"
            continue

        # üîÑ –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ BATCH_SIZE
        batch_results = {}
        for i in range(0, len(urns), BATCH_SIZE):
            batch = urns[i:i + BATCH_SIZE]
            statuses = await check_translation_status(session, access_token, batch)

            for version in versions:
                urn = version.get("urn", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                if urn in statuses:
                    version["translation_status"] = "‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–∞" if statuses[urn] == "success" else "‚è≥ –ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞"

            batch_results.update(statuses)

        project_results[file_name] = batch_results

    return {
        "project_id": project_id,
        "versions": project_results
    }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ö–∞–±–∞—Ö."""
    async with aiohttp.ClientSession() as session:
        hub_folders = [f for f in os.listdir(BASE_FOLDER) if os.path.isdir(os.path.join(BASE_FOLDER, f))]

        print("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–∞–±—ã:")
        for idx, hub_name in enumerate(hub_folders, start=1):
            print(f"{idx}. {hub_name}")

        hub_idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ö–∞–±–∞: ")) - 1
        if hub_idx < 0 or hub_idx >= len(hub_folders):
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ö–∞–±–∞!")
            return

        hub_name = hub_folders[hub_idx]
        hub_path = os.path.join(BASE_FOLDER, hub_name)
        print(f"\nüîπ –í—ã–±—Ä–∞–Ω —Ö–∞–±: {hub_name}")

        # üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ö–∞–±–∞
        project_folders = [f for f in os.listdir(hub_path) if os.path.isdir(os.path.join(hub_path, f))]

        print("\nüîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
        for idx, project_name in enumerate(project_folders, start=1):
            print(f"{idx}. {project_name}")

        project_idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: ")) - 1
        if project_idx < 0 or project_idx >= len(project_folders):
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        project_name = project_folders[project_idx]
        project_path = os.path.join(hub_path, project_name)
        print(f"\nüîπ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}\n")

        # üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        result = await process_project(session, access_token, hub_name, project_name, project_path)

        if result:
            # üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
            json_output_path = os.path.join(project_path, "translation_status.json")
            with open(json_output_path, "w", encoding="utf-8") as f:
                json.dump(result, f, indent=4, ensure_ascii=False)

            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_output_path}")
        else:
            print(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())  # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ Windows
    
    asyncio.run(main())  # üîπ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
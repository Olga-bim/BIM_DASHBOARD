import os
import json
import asyncio
import aiohttp
from get_token import load_token


BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# –ó–∞–≥—Ä—É–∂–∞–µ–º access_token –∏–∑ —Ñ–∞–π–ª–∞
access_token = load_token()

HUBS_ENDPOINT = "https://developer.api.autodesk.com/project/v1/hubs"
ACTIVITY_LOG_BIM360 = "https://developer.api.autodesk.com/bim360/admin/v1/projects/{}/activity-stream"
ACTIVITY_LOG_ACC = "https://developer.api.autodesk.com/construction/admin/v1/projects/{}/activity-stream"


async def fetch(session, url, headers, description):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    for attempt in range(1, 6):
        print(f"üîπ {description} -> {url} (–ü–æ–ø—ã—Ç–∫–∞ {attempt})")
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {description}")
                return await response.json()
            elif response.status == 429:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤). –ñ–¥–µ–º {attempt * 2} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(attempt * 2)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ ({response.status}) –ø—Ä–∏ {description}")
                return None
    return None


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç ID –¥–ª—è —Ö–∞–±–∞
async def get_hub_account_id(session, access_token):
    """–ü–æ–ª—É—á–∞–µ—Ç `account_id` –¥–ª—è —Ö–∞–±–∞."""
    response = await fetch(session, HUBS_ENDPOINT, {"Authorization": f"Bearer {access_token}"}, "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ö–∞–±–æ–≤")
    if response and "data" in response:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ö–∞–±
        hub = response["data"][0]
        hub_name = hub["attributes"]["name"]
        account_id = hub["id"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω `account_id`: {account_id} –¥–ª—è —Ö–∞–±–∞ {hub_name}")
        return account_id, hub_name
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–∞–±—ã.")
        return None, None


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ö–∞–±–µ –ø–æ ID —Ö–∞–±–∞
async def get_projects(session, access_token, hub_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ö–∞–±–µ."""
    url = f"https://developer.api.autodesk.com/project/v1/hubs/{hub_id}/projects"
    return await fetch(session, url, {"Authorization": f"Bearer {access_token}"}, "–ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
async def get_activity_logs(session, access_token, project_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞."""
    headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
    url_bim360 = ACTIVITY_LOG_BIM360.format(project_id)
    url_acc = ACTIVITY_LOG_ACC.format(project_id)

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è BIM 360, –ø–æ—Ç–æ–º –¥–ª—è ACC
    response_bim360 = await fetch(session, url_bim360, headers, f"–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (BIM 360) –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    if not response_bim360:
        response_bim360 = await fetch(session, url_acc, headers, f"–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (ACC) –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")

    return response_bim360 or {"data": []}  # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π JSON


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–µ–∫—Ç
async def save_activity_logs(project_folder, activity_logs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª JSON –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
    json_file_path = os.path.join(project_folder, "activity_logs.json")

    # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    if not os.path.exists(project_folder):
        print(f"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.")
        return

    print(f"üîç –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {json_file_path}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    with open(json_file_path, "w", encoding="utf-8") as f:
        json.dump(activity_logs, f, indent=4, ensure_ascii=False)

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_file_path}")


# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def process_project(session, access_token, hub_name, project):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç: –ø–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."""
    project_folder = os.path.join(BASE_DIR, hub_name, project["attributes"]["name"])
  # –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    print(f"üîç –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_folder}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    activity_logs = await get_activity_logs(session, access_token, project["id"])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
    await save_activity_logs(project_folder, activity_logs)


# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
async def main():
    async with aiohttp.ClientSession() as session:
        account_id, hub_name = await get_hub_account_id(session, access_token)
        if account_id and hub_name:
            projects = await get_projects(session, access_token, account_id)
            for project in projects["data"]:
                await process_project(session, access_token, hub_name, project)
        print("üéâ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main())

import os
import sqlite3
import pandas as pd

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
HUB_FOLDER = os.path.join(BASE_DIR, "BIMW_-_WXG_Group")
DATASET_PATH = os.path.join(BASE_DIR, "backend", "data", "dataset.csv")

def run_dataset_update():
    all_data = []

    for project in os.listdir(HUB_FOLDER):
        print(f"\nüîç –ü—Ä–æ–µ–∫—Ç: {project}")
        db_path = os.path.join(HUB_FOLDER, project, "project_data.sqlite")

        if not os.path.isfile(db_path):
            print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–∞ project_data.sqlite")
            continue

        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [t[0] for t in cursor.fetchall()]
            print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {tables}")

            for table in tables:
                if table.startswith("sqlite_"):
                    continue  # —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã

                cursor.execute(f"PRAGMA table_info({table})")
                columns = [col[1] for col in cursor.fetchall()]
                print(f"üî∏ –¢–∞–±–ª–∏—Ü–∞ {table}: —Å—Ç–æ–ª–±—Ü—ã {columns}")

                try:
                    df_table = pd.read_sql_query(f"SELECT * FROM {table}", conn)
                    df_table.insert(0, "project", project)
                    df_table.insert(1, "table_name", table)
                    all_data.append(df_table)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {project}: {e}")
        finally:
            conn.close()

    if all_data:
        df_final = pd.concat(all_data, ignore_index=True)
        os.makedirs(os.path.dirname(DATASET_PATH), exist_ok=True)
        df_final.to_csv(DATASET_PATH, index=False)
        print(f"\n‚úÖ dataset.csv –æ–±–Ω–æ–≤–ª—ë–Ω: {len(df_final)} —Å—Ç—Ä–æ–∫")
    else:
        print("\n‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

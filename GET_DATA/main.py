import asyncio
import aiohttp
import json
import sys
import os
import base64
from get_token import load_token  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º access_token
access_token = load_token()

# ‚úÖ Forge API Endpoints
HUBS_ENDPOINT = "https://developer.api.autodesk.com/project/v1/hubs"
PROJECTS_ENDPOINT = "https://developer.api.autodesk.com/project/v1/hubs/{hub_id}/projects"
TOP_FOLDERS_ENDPOINT = "https://developer.api.autodesk.com/project/v1/hubs/{hub_id}/projects/{project_id}/topFolders"
FOLDER_CONTENTS_ENDPOINT = "https://developer.api.autodesk.com/data/v1/projects/{project_id}/folders/{folder_id}/contents"
VERSIONS_ENDPOINT = "https://developer.api.autodesk.com/data/v1/projects/{project_id}/items/{file_id}/versions"

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))



# ‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ URN –≤ Base64
def encode_urn(urn):
    return base64.b64encode(urn.encode()).decode().rstrip("=")


# ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 429 (Too Many Requests)
async def fetch(session, url, headers, description):
    for attempt in range(1, 6):
        print(f"üîπ {description} -> {url} (–ü–æ–ø—ã—Ç–∫–∞ {attempt})")
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                return await response.json()
            elif response.status == 429:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤). –ñ–¥—ë–º {attempt * 2} —Å–µ–∫...")
                await asyncio.sleep(attempt * 2)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ ({response.status}) –ø—Ä–∏ {description}")
                return None
    return None


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ö–∞–±–æ–≤
async def get_hubs(session):
    hubs_data = await fetch(session, HUBS_ENDPOINT, {"Authorization": f"Bearer {access_token}"}, "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ö–∞–±–æ–≤")
    if hubs_data:
        return [{"id": hub["id"], "name": hub["attributes"]["name"].replace(" ", "_")} for hub in hubs_data.get("data", [])]
    return []


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ö–∞–±–µ
async def get_projects(session, hub_id):
    projects_data = await fetch(session, PROJECTS_ENDPOINT.format(hub_id=hub_id),
                                {"Authorization": f"Bearer {access_token}"}, "–ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    if projects_data:
        return [{"id": proj["id"], "name": proj["attributes"]["name"].replace(" ", "_")} for proj in
                projects_data.get("data", [])]
    return []


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
async def get_top_folders(session, hub_id, project_id):
    url = TOP_FOLDERS_ENDPOINT.format(hub_id=hub_id, project_id=project_id)
    response = await fetch(session, url, {"Authorization": f"Bearer {access_token}"}, "–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫")
    return response.get("data", []) if response else []


# ‚úÖ –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ BIM Models –≤–Ω—É—Ç—Ä–∏ Project Files
async def find_bim_models_folder(session, project_id, top_folders):
    for folder in top_folders:
        if "project files" in folder["attributes"]["displayName"].lower():
            project_files_folder_id = folder["id"]
            contents = await fetch(session, FOLDER_CONTENTS_ENDPOINT.format(project_id=project_id, folder_id=project_files_folder_id),
                                   {"Authorization": f"Bearer {access_token}"}, "–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫ Project Files")
            if contents:
                for subfolder in contents.get("data", []):
                    if "bim models" in subfolder["attributes"]["displayName"].lower():
                        return subfolder["id"]
    return None


# ‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ `.rvt` —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ BIM Models
async def get_all_rvt_files(session, project_id, folder_id):
    rvt_files = []
    contents = await fetch(session, FOLDER_CONTENTS_ENDPOINT.format(project_id=project_id, folder_id=folder_id),
                           {"Authorization": f"Bearer {access_token}"}, "–ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ Revit")

    if contents:
        for item in contents.get("data", []):
            if item["type"] == "folders":
                rvt_files.extend(await get_all_rvt_files(session, project_id, item["id"]))
            elif item["type"] == "items" and item["attributes"]["displayName"].endswith(".rvt"):
                rvt_files.append({"name": item["attributes"]["displayName"], "id": item["id"]})

    return rvt_files


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–∞
async def get_file_versions(session, project_id, file_id):
    url = VERSIONS_ENDPOINT.format(project_id=project_id, file_id=file_id)
    response = await fetch(session, url, {"Authorization": f"Bearer {access_token}"}, f"–ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–∞ {file_id}")

    versions = []
    if response:
        for version in response.get("data", []):
            attributes = version.get("attributes", {})
            version_data = {
                "version_id": version.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "version_number": attributes.get("versionNumber", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "last_modified_time": attributes.get("lastModifiedTime", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "last_modified_user": attributes.get("lastModifiedUserName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "published_time": attributes.get("publishedTime", "–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"),
                "published_user": attributes.get("publishedUserName", "–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"),
                "process_state": version.get("extension", {}).get("processState", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "urn": encode_urn(version["relationships"]["storage"]["data"]["id"])
                if "relationships" in version and "storage" in version["relationships"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            }
            versions.append(version_data)

        return versions
    return []


# ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def process_project(session, hub, project):
    print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: {project['name']} (–∏–∑ —Ö–∞–±–∞ {hub['name']})")

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    project_path = os.path.join(BASE_DIR, hub["name"], project["name"])
    os.makedirs(project_path, exist_ok=True)

    # –ü–æ–ª—É—á–∞–µ–º BIM Models
    top_folders = await get_top_folders(session, hub["id"], project["id"])
    bim_models_folder_id = await find_bim_models_folder(session, project["id"], top_folders)

    if not bim_models_folder_id:
        print(f"‚ö†Ô∏è –í –ø—Ä–æ–µ–∫—Ç–µ {project['name']} –Ω–µ—Ç –ø–∞–ø–∫–∏ 'BIM Models'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã Revit
    rvt_files = await get_all_rvt_files(session, project["id"], bim_models_folder_id)
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(rvt_files)} —Ñ–∞–π–ª–æ–≤ Revit –≤ {project['name']}.")

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤
    for rvt_file in rvt_files:
        rvt_file["versions"] = await get_file_versions(session, project["id"], rvt_file["id"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º rvt_files.json
    json_file_path = os.path.join(project_path, "rvt_files.json")
    with open(json_file_path, "w", encoding="utf-8") as f:
        json.dump({"project_id": project["id"], "rvt_files": rvt_files}, f, indent=4, ensure_ascii=False)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_file_path}")


# ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
async def main():
    async with aiohttp.ClientSession() as session:
        hubs = await get_hubs(session)
        while True:
            print("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–∞–±—ã:")
            for i, hub in enumerate(hubs, start=1):
                print(f"{i}. {hub['name']}")

            hub_index = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ö–∞–±–∞: ")) - 1
            projects = await get_projects(session, hubs[hub_index]["id"])

            print("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            for i, project in enumerate(projects, start=1):
                print(f"{i}. {project['name']}")

            project_index = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: ")) - 1
            await process_project(session, hubs[hub_index], projects[project_index])

            cont = input("–•–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if cont != "–¥–∞":
                break


if __name__ == "__main__":
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())  # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ Windows
    
    asyncio.run(main())  # üîπ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
import asyncio  
import aiohttp
import json
import os
import sys
import time
from get_token import load_token  # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–µ–∑ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
BASE_FOLDER = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "BIMW_-_WXG_Group"))
  # –ü–∞–ø–∫–∞ —Ö–∞–±–∞
VERSION_STATUS_FILE = "versions_status.json"  # –§–∞–π–ª —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤–µ—Ä—Å–∏–π

# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω ===
access_token = load_token()

# === API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ===
DERIVATIVE_MANIFEST_ENDPOINT = "https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/manifest"

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å ===
async def fetch(session, url, headers, description):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429."""
    for attempt in range(1, 6):
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                return await response.json()
            elif response.status == 429:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 ({description}), –∂–¥—ë–º {attempt * 2} —Å–µ–∫...")
                await asyncio.sleep(attempt * 2)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} ({description})")
                return None
    return None

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ===
async def check_translation_status(session, urn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–µ—Ä—Å–∏–∏."""
    url = DERIVATIVE_MANIFEST_ENDPOINT.format(urn=urn)
    headers = {"Authorization": f"Bearer {access_token}"}

    response = await fetch(session, url, headers, f"–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞ URN {urn}")
    if response:
        return response.get("status", "not available")
    return "not available"

# === –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ ===
def select_project():
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —Ö–∞–±–µ."""
    projects = [f for f in os.listdir(BASE_FOLDER) if os.path.isdir(os.path.join(BASE_FOLDER, f))]

    if not projects:
        print("‚ùå –í —Ö–∞–±–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        return None

    print("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
    for i, project in enumerate(projects, start=1):
        print(f"{i}. {project}")

    choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: ")) - 1
    if 0 <= choice < len(projects):
        return projects[choice]
    return None

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ===
async def process_project(project_name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è—è —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π."""
    project_path = os.path.join(BASE_FOLDER, project_name)
    json_path = os.path.join(project_path, "rvt_files.json")

    if not os.path.exists(json_path):
        print(f"‚ö†Ô∏è –í –ø—Ä–æ–µ–∫—Ç–µ {project_name} –Ω–µ—Ç —Ñ–∞–π–ª–∞ rvt_files.json. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        return

    with open(json_path, "r", encoding="utf-8") as f:
        project_data = json.load(f)

    versions_data = {}  # –°—é–¥–∞ –∑–∞–ø–∏—à–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤–µ—Ä—Å–∏–π

    async with aiohttp.ClientSession() as session:
        for rvt_file in project_data.get("rvt_files", []):
            file_name = rvt_file["name"]
            versions_data[file_name] = []

            for version in rvt_file.get("versions", []):
                version_number = version["version_number"]
                urn = version.get("urn", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                if urn == "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
                    print(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è {version_number} ({file_name}) - URN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
                    versions_data[file_name].append({"version": version_number, "status": "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω", "urn": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"})
                    continue

                status = await check_translation_status(session, urn)
                print(f"‚úÖ –í–µ—Ä—Å–∏—è {version_number} ({file_name}) - {status}")
                versions_data[file_name].append({"version": version_number, "status": status, "urn": urn})

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON ===
    save_versions_status(project_name, versions_data)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON ===
def save_versions_status(project_name, versions_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä—Å–∏—è—Ö –≤ versions_status.json"""
    if os.path.exists(VERSION_STATUS_FILE):
        with open(VERSION_STATUS_FILE, "r", encoding="utf-8") as f:
            all_data = json.load(f)
    else:
        all_data = {}

    if "BIMW_-_WXG_Group" not in all_data:
        all_data["BIMW_-_WXG_Group"] = {}

    all_data["BIMW_-_WXG_Group"][project_name] = versions_data

    with open(VERSION_STATUS_FILE, "w", encoding="utf-8") as f:
        json.dump(all_data, f, indent=4, ensure_ascii=False)

    print(f"üìÇ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {VERSION_STATUS_FILE}")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    project_name = select_project()
    if not project_name:
        return

    print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: {project_name} (–∏–∑ —Ö–∞–±–∞ BIMW_-_WXG_Group)")
    await process_project(project_name)


if __name__ == "__main__":
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())  # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ Windows
    
    asyncio.run(main())  # üîπ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
